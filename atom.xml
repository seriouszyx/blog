<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>隐秀</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://seriouszyx.github.io/"/>
  <updated>2021-06-01T06:53:26.910Z</updated>
  <id>https://seriouszyx.github.io/</id>
  
  <author>
    <name>Yixiang Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>what-is-blockchain</title>
    <link href="https://seriouszyx.github.io/2021/06/01/what-is-blockchain/"/>
    <id>https://seriouszyx.github.io/2021/06/01/what-is-blockchain/</id>
    <published>2021-06-01T14:40:07.000Z</published>
    <updated>2021-06-01T06:53:26.910Z</updated>
    
    <content type="html"><![CDATA[<p>区块链现在是紧跟着人工智能、大数据的新名词，提起区块链，大多数人首先想到的是炒币，充斥着虚假、浮躁，再加上前几年国家对这种现象的抵制，让很多人对区块链技术望而却步。</p><p>殊不知，比特币只是区块链技术的一个分支，而区块链本身，凝聚了许许多多计算机科学家的智慧，发展突飞猛进，正在脱离实验室，走进人们的生活，未来可期。从 Facebook 的 <span class="exturl"><a class="exturl__link"   href="https://libra.org/" >libra</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 到最近<span class="exturl"><a class="exturl__link"   href="https://www.infoq.cn/article/zglACBgaSGXKFHV85F3G" >中国的重视态度</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，像 AI 一样，区块链将是未来几年甚至几十年围绕着人们的新技术。</p><p>回过头来看，2008 年末“中本聪”提出区块链概念到目前为止不过十多年，现在开始了解区块链，你我都称得上是这项技术的先驱者。</p><p>不过，目前国内介绍区块链的内容还是显得浮躁，鲜有真正踏踏实实介绍其内部技术细节的文章。下面是一篇我翻译的区块链的介绍文章，由 <span class="exturl"><a class="exturl__link"   href="https://mohitmamoria.medium.com/" >Mohit Mamoria</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 所作，在 <span class="exturl"><a class="exturl__link"   href="https://medium.com/hackernoon/wtf-is-the-blockchain-1da89ba19348" >Medium</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 上收到了广泛好评。文章比较长，图片很多，但值得耐心读完。无论你对区块链的认知如何，下面的有些内容一定会让你感到吃惊。</p><!--more-># 到底什么才是区块链？除非你是个鸵鸟，总是喜欢把脑袋埋进沙子里，否则你一定曾经听说过比特币和区块链这两个名词。毕竟，它们都是当今炙手可热的话题，即使是从未开采过加密货币或是从未了解过加密货币工作原理的人，也都在讨论它。跟很多人一样，我身边谈论它的非专业朋友甚至多于专业朋友。当这种情况发生，就到了写点东西的时候了，我希望用简单的文字为所有普通的互联网用户指明方向，以免大家在迷雾中没头脑地摸索。## 区块链：为什么我们需要这么复杂的东西？> “对于每个复杂的问题，都有一个清晰、简单而错误的答案” — H. L. Mencken与互联网上其他的文章不同的是，我们首先不是要定义区块链，而是要理解它所解决的问题。想象这样一个情景，你叫 Dude，你最好的朋友 Joe 在国外旅行，在他假期的第五天，他打电话给你说：“哥们，能不能借我点钱，我钱都花光了。”你回复他：“我马上就给你转。”![](/assets/posts/what-is-blockchain/1.png)然后你给银行经理打电话，让他从你的的账户上转1000美元到 Joe 的账户上。你的银行经理收到消息后打开登记簿，检查你的账户余额，看看你有没有足够的钱转账。在确认了你有足够的金额后，他在登记簿上做了如下操作：![](/assets/posts/what-is-blockchain/2.png)你打电话给 Joe，说钱已经汇过去了，下次他去银行就可以把你刚转给他的钱取出来了。![](/assets/posts/what-is-blockchain/3.png)刚刚发生了什么？你和 Joe 都相信银行来管理你们的资产。钱并没有真正的转移，只是在登记簿上做了一些记录。更准确的讲，你和 Joe 都不能直接控制登记簿上的记录。这就是当前系统存在的问题。**为了建立彼此之间的信任，我们必须依赖于第三方。**多少年来，我们一直以来这些中间人达到相互信任，可能你会问，依赖他们有什么问题吗？问题就是他们在数量上是单一的，如果一个人/一个组织有意或无意地走向腐败，那么社会就会混乱。- 如果记录交易的登记簿火灾中被烧毁了怎么办？- 如果你的银行经理将1000美元误写成了1500美元怎么办？- 如果他故意这么做怎么办？**多年来，我们总是在一棵树上吊死。**是否有这样一个系统，让我们不需要银行就可以转账？为了回答这个问题，我们需要进一步细化，问自己一个更好的问题（毕竟更好的问题才能得到更好的答案）。思考一下，转账这个动作意味着什么?只是在登记簿上记录一下，下面才是更好的问题——**有没有一种方式来维持我们之间的记录，而不是其他人替我们维持？**这是一个值得讨论的问题，不过我想你已经猜到了，**区块链**就是这个问题的答案。这是一种不需要依靠他人，仅凭我们自己来保持记录的方法。你应该没有走神吧？很好，因为现在，当这几个问题在你的脑海中开始浮现时，我们将正式介绍这个分布式记录簿是怎样工作的。## 告诉我，区块链是如何运作的？这种方法的前提条件是有足够多不希望依赖于第三方的人，只有这样，这些人才能自己维持记录。> 为了防止比特币流行起来，购买一些比特币或许是有意义的，如果有足够的人这样想，那么这将成为一个自我实现的语言。—中本聪（Satoshi Nakamoto），2009年多少个人才足够呢？至少三个，在我们的例子中，假设十个人想要放弃银行或其他第三方。经过大家的同意后，他们会一直保持彼此账户的详细信息，而无需知道别人的身份。![](/assets/posts/what-is-blockchain/4.png)1.一个空文件夹每个人都有一个空的文件夹，随着大家的前进，每个人的文件夹中都会添加新的记录页，这些记录页的集合就是记录交易的记录簿。2.什么时候发生交易？接下来，这个网络中的每个人手机都拿着一张纸额一支笔，每个人都准备记录系统中发生的任何交易。假设2号想要给9号转10美元。为了达成交易，2号要向大家喊：“我想给9号转10美元，所以，你们每个人都在自己的记录页上记下这笔交易。”![](/assets/posts/what-is-blockchain/5.png)每个人都会检查2号是否有10美元转给9号，如果有的话，他们每个人都会在自己的记录页上写下这笔交易。![](/assets/posts/what-is-blockchain/6.png)然后这笔交易就被视作完成了。3.交易不断发生随着时间的推移，系统中的每个人都有交易的需求。每当他们想交易时，都会向所有人公布，别人听完公布并检查后，都会将交易写在自己的记录页上。这个流程会一直进行下去，知道每个人都用光了当前的记录页。假设一个记录页可以记录十笔交易，当第十笔交易完成后，就证明每个人都用光了当前的记录页。![](/assets/posts/what-is-blockchain/7.png)现在是时候将记录页放到文件夹中，再取出一个新的记录页，重复上述的流程。4.收回记录页在我们将记录页放回文件夹之前，需要使用一个唯一的密钥来密封它，而且这个密钥要经过系统中每个人的同意。通过密封，我们将确保，无论今天、明天、甚至是一年后，一旦它的副本放在每个人自己的文件夹中，就没有人可以再对它进行任何更改。一旦进入文件夹，它就将永远在文件夹中密封。而且，如果每个人都信任印章，那么每个人都信任记录页的内容，**记录页的密封**也正是这个方法的关键之处。> 这在现实中称作“挖矿”，不过简单起见，我们仍然称它为“密封”。先前，第三方/中间人为我们提供信任，我们相信他们在记录簿上记录的内容不会改变。而在我们的这种分布式系统中，密封的手段为我们提供信任。## 很有趣！那么我们如何密封记录页呢？通常，在学习如何密封之前，我们将对密封的工作原理有一个大致的了解。作为前提，你需要知道这几个名词。### 魔法机器想象一个被厚重墙壁包裹的机器，如果你从左边输入一个装有东西的盒子，它会从右边吐出一个装有其他东西的盒子。> 事实上，这台机器叫“哈希函数”，不过我不太想技术化，现在，他就是台神奇的机器。![](/assets/posts/what-is-blockchain/8.png)假设，你从左边输入4，它可能从右边返回这些单词：dcbea。它是如何把数字4转换成这个单词的呢？没有人知道。而且，这是一个不可逆的过程。有了 dcbea 这个词，却不可能知道机器的左边被输入了什么。但每次你把数字4输入机器时，它总会吐出相同的单词 dcbea。![](/assets/posts/what-is-blockchain/9.png)让我们再尝试输入一个不同的数字，比如说 26。![](/assets/posts/what-is-blockchain/10.png)这次我们得到了 94c8e。很有趣不是吗！原来单词也可以包含数字。好，接下来请你思考这样一个问题：**你能告诉我我应该从机器的左边输入什么，才能从右边得到一个以三个0开头的单词吗？例如，000ab 或 00098 或 000fa 或其他单词。**![](/assets/posts/what-is-blockchain/11.png)好好想一会这个问题。之前说过，这台机器的一个性质就是无法从右边的输出结果推测出左边的输入内容，那么怎么才能回答我提出的问题呢？我能想到一个方法，为什么不一个一个尝试世界上所有的数呢，直到得到一个以三个0开头的单词？![](/assets/posts/what-is-blockchain/12.png)乐观地看，经过几千次尝试后，我们才会得到一个所需的输出。![](/assets/posts/what-is-blockchain/13.png)可见，根据输出来计算输入是一件很困难很困难的事情。但与此同时，要验证输入是否产生一个所需的输出总是非常容易的。记住，输入相同的数组机器总产生同样的单词。如果我给你一个数，比如说 72533，然后问你：“把这个数从左边放入机器中，是否能得到一个以三个0开头的单词？”那么你需要做的，就仅仅是把这个数字扔进机器中，然后观察右边产生的单词，你看，就是它。这种机器最重要的一个性质就是——“已知一个输出，很难计算出它的输入是什么，不过已知一个输入和一个输出，却很容易验证它们是否匹配。”在文章的剩余部分，一定要记住魔法机器（或者叫哈希函数）的这一特性：**已知一个输出，很难计算出它的输入是什么，不过已知一个输入和一个输出，却很容易验证它们是否匹配。**### 如何使用这些机器来密封记录页？我们将使用这种魔法机器来为记录页产生印章。同样，举个例子来说明。假设给你两个盒子，其中一个盒子中的数字是 20893，那么请问你能不能找出一个数字，使它加上20893并放入机器后产生一个以三个0开头的单词？![](/assets/posts/what-is-blockchain/14.png)这和之前的情况类似，我们已经知道答案了，计算这样一个数字的一个唯一的方法就是枚举世界上的每个数字。经过了几千次尝试后，我们或许能偶然发现一个数字，比如说21191，加上20893（21191 + 20893 = 42084）后放入机器中，可以得到一个满足需求的单词。![](/assets/posts/what-is-blockchain/15.png)在这种情况下，21191这个数字就是20893的印章。假设有一个记录页上写着20893，那么要密封该页（即任何人都不能更改该页的内容），我们就会在该页贴上21191的标签，封口号（即21191）一贴在记录页上，就表明该记录页已经被密封了。![](/assets/posts/what-is-blockchain/16.png)> 封口号被称为“工作证明（Proof Of Work）”，表明这个编号是经过努力的计算得来的，不过为了说明，我们更乐意叫它封口号。这样，想要验证一个记录页是否被篡改就很简单了，只需将记录页的内容加上封口号，再输入到魔法机器中，观察产生的结果是否以三个0开头。如果出现的单词不符合我们的要求，那就证明该页被更改了，没有任何用处。我们将使用类似的密封机制来密封所有记录页，并排列好它们放入各自的文件夹中。### 最后，密封我们的记录页为了密封包含系统中交易的记录页，我们需要计算出一个数字，这个数字添加到交易列表并输入到机器中，得到一个以三个0开头的单词。![](/assets/posts/what-is-blockchain/17.png)> “以三个0为开头的单词”只是一个例子，它说明了哈希函数的工作原理，实际情况比这复杂得多。花费时间和电力计算出的这个数字，就被用来作为记录页的封口号。如果有人试图篡改该页的内容，其他人可以使用封口号来验证它的完整性。现在，我们已经知道了如何封页。那么转回我们在记录页上完成第十笔交易的时间，我们已经用光了空间不能再增加新的交易了。当每个人都用完了记录页的空间时，他们就会沉迷于计算记录页的封口号，以便将它们放入文件夹中。系统中的每个人都会计算，第一个计算出封口号的人会向其他人宣布这个数字。![](/assets/posts/what-is-blockchain/18.png)一听到密封号，每个人都会立刻验证它是否产生了所需的输出。如果通过了验证，那么每个人都将使用这个数字来密封他们的记录页，并放入文件夹中。但是，对于某个人（比如7号）来说，公布的密封号不能产生所需的输出结果，该怎么办？这种情况并不罕见，可能有以下几个原因：- 他可能听错了系统中的某个交易- 他可能写错了系统中的某个交易- 在记录某些交易时，他可能试图伪造以使自己或系统中的其他人受益不管原因是什么，7号只剩下一个选择，那就是放弃他的记录页，从其他人哪里拷贝一份，然后放进他的文件夹中。如果他表示反对，那么他就无法继续进行交易，而且被禁止成为系统的一部分。**多数人通过的密封号就是真实的密封号。**可能你会问，既然知道了别人计算出密封号后会向他们公布，那为什么他们自己还要花费资源计算呢？为什么不闲坐着静静等待公布呢？这是一个很好的问题，恰恰指明了区块链的激励来源，第一个计算出密封号的人会因为他的努力（即消耗的 CPU 功率和电力）而获得免费的金钱。试想一下，如果5号计算出一个记录页的封口号，他就会得到免费的金钱，比如说1美元。这些钱是凭空冒出来的，换句话说，5号的账户余额会增加1美元，而其他人的余额不会减少。比特币就是这样诞生的，它是区块链上进行交易的第一种货币。为了回报对封口号努力的计算，人们被授予比特币。当足够数量的人获得比特币时，它们的价值就会增加，促使其他人也想获得比特币。**奖励让系统中的每个人都保持工作。**一旦每个人都将记录页放入文件夹中，他们就会拿出一个新的记录页，并永远重复这个流程。> 将一个记录页想象成一个交易区块，将一个文件夹想象成一个记录页（区块）的链表，这样，就演变成了区块链。至此，你已经掌握了区块链的工作原理。---还有一个小问题没有告诉你。假设文件夹中已经有了五个密封好的记录页，如何有人想篡改第二页的一笔交易呢？为修改后的记录页生成一个新的密封号就可以了吗？为了防止有人返回修改记录页和密封号，需要在计算密封号的过程中稍微变化一下。### 保护密封号的修改还记得刚才讲过的两个盒子吗？一个盒子中包含数字20893，另一个盒子中的数字需要你计算。在现实中，要计算一个区块的密封号，不是两个盒子，而是两个填充好的，一个需要计算的。当这三个盒子的内容加和并输入机器时，从右边出来的答案必须满足要求的条件。我们已经知道，一个盒子包含交易列表，一个盒子包含封口号，第三个盒子有些不同，它包含了前一页魔法机器的输出结果。![](/assets/posts/what-is-blockchain/19.png)通过这个简单的小技巧，我们确保了每个记录页都依赖于上一个记录页。因此，如果某个人必须修改历史的记录页，那么他还需要修改之后的所有记录页的内容和封封口号，以保持链表的一致。如果我们一开始想象的十个人中的一个试图欺骗篡改区块链的内容，他就部分不调整几个记录页，并为这些记录页计算出新的封口号。我们知道计算封口号是一个很困难的过程，因此系统中的一个不诚实的人无法打败其他九个诚实的人。还有可能发生这种情况，一个不诚实的人作弊，他会创建一个新的链表。不过这个新的链表永远无法赶上诚实的链表，因为一个人的努力和速度无法打败其他九个人的累计之和。因此，**系统中最长的链表是最诚实的链表。**![](/assets/posts/what-is-blockchain/20.png)当我告诉你一个不诚实的人无法打败九个诚实的人时，你是不是有新的疑问呢？### 不是一个，如果六个人都变得不诚实呢？在这种情况下，协议将彻底失败，这被称为“51%攻击”。如果系统中的大多数个体u决定变得不诚实并欺骗系统中的其他部分时，协议就毫无价值了。这也是个区块链可能崩溃的唯一脆弱原因，要知道，这几乎是不可能发生的，但我们都必须知道系统的弱点，它是建立在大多数人始终诚实的基础上的。朋友们，这就是关于区块链的所有内容了。如果你发现有人被这项技术甩在身后，那么就把这篇文章分享给他，让他将链接添加至书签。]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;区块链现在是紧跟着人工智能、大数据的新名词，提起区块链，大多数人首先想到的是炒币，充斥着虚假、浮躁，再加上前几年国家对这种现象的抵制，让很多人对区块链技术望而却步。&lt;/p&gt;
&lt;p&gt;殊不知，比特币只是区块链技术的一个分支，而区块链本身，凝聚了许许多多计算机科学家的智慧，发展突
      
    
    </summary>
    
    
      <category term="区块链" scheme="https://seriouszyx.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>最新超详细 VMware 的下载与安装</title>
    <link href="https://seriouszyx.github.io/2021/05/30/vmware-download-and-install/"/>
    <id>https://seriouszyx.github.io/2021/05/30/vmware-download-and-install/</id>
    <published>2021-05-30T14:28:30.000Z</published>
    <updated>2021-06-01T06:53:26.910Z</updated>
    
    <content type="html"><![CDATA[<p>我的 CSDN 站点上破 50w 浏览量的 <span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_40950957/article/details/80467513" >VMware 安装教程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，由于 CSDN 文章中发现写有激活码审核不通过，所以将其放于本独立博客站点。</p><a id="more"></a>        <h2 id="VMware-下载"   >          <a href="#VMware-下载" class="heading-link"><i class="fas fa-link"></i></a><a href="#VMware-下载" class="headerlink" title="VMware 下载"></a>VMware 下载</h2>      <p>进入官网的 <span class="exturl"><a class="exturl__link"   href="https://www.vmware.com/cn/products/workstation-pro.html" >VMware Workstation Pro 页面</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，浏览功能特性、应用场景、系统要求等。下滑页面点击 <code>试用 Workstation 16 Pro</code> 下方的下载链接，跳转至<span class="exturl"><a class="exturl__link"   href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html" >下载页面</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/vmware-download-and-install/1.png" >      </p><p>在下载页面中下滑，根据操作系统选择合适的产品，在这里以 Windows10 系统为例，选择  <code>Workstation 16 Pro for Windows</code>，开始下载安装文件。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/vmware-download-and-install/2.png" >      </p>        <h2 id="VMware-安装"   >          <a href="#VMware-安装" class="heading-link"><i class="fas fa-link"></i></a><a href="#VMware-安装" class="headerlink" title="VMware 安装"></a>VMware 安装</h2>      <p>打开下载好的 <code>.exe</code> 文件， 即可开始安装。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/vmware-download-and-install/3.png" >      </p><p>安装位置默认在 C 盘下，在这里我选择安装在 D 盘，安装路径尽量不要有中文。可勾选 <code>增强型键盘驱动程序</code> ，此功能可更好地处理国际键盘和带有额外按键的键盘。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/vmware-download-and-install/4.png" >      </p><p>一直点击 <code>下一步</code> 等待软件安装完成。 </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/vmware-download-and-install/5.png" >      </p><p>安装成功后点击 <code>许可证</code> 输入密钥激活软件。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/vmware-download-and-install/6.png" >      </p><p>下面是一些网上搜集的可用密钥，复制到文本框中点击 <code>输入</code>。</p><ul><li>VMware Workstation Pro 16<ul><li>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</li></ul></li><li>VMware Workstation Pro 15<ul><li>FG78K-0UZ15-085TQ-TZQXV-XV0CD</li><li>ZA11U-DVY97-M81LP-4MNEZ-X3AW0</li><li>YU102-44D86-48D2Z-Z4Q5C-MFAWD</li></ul></li></ul><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/vmware-download-and-install/7.png" >      </p><p>安装后可能要求重启系统，重启后进入软件。依次点击导航栏中的 <code>帮助 -&gt; 关于 VMware Workstation</code> ，查看许可证信息的状态，如下图所示即为激活成功。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/vmware-download-and-install/8.png" >      </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的 CSDN 站点上破 50w 浏览量的 &lt;span class=&quot;exturl&quot;&gt;&lt;a class=&quot;exturl__link&quot;   href=&quot;https://blog.csdn.net/qq_40950957/article/details/80467513&quot; &gt;VMware 安装教程&lt;/a&gt;&lt;span class=&quot;exturl__icon&quot;&gt;&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;，由于 CSDN 文章中发现写有激活码审核不通过，所以将其放于本独立博客站点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件安装" scheme="https://seriouszyx.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>服务器内网穿透</title>
    <link href="https://seriouszyx.github.io/2021/02/14/expose-local-server/"/>
    <id>https://seriouszyx.github.io/2021/02/14/expose-local-server/</id>
    <published>2021-02-14T13:40:49.000Z</published>
    <updated>2021-06-01T06:53:26.910Z</updated>
    
    <content type="html"><![CDATA[<p>本科 AI 实验室的服务器在内网部署，疫情期间大家都没办法在学校，又需要使用 GPU 完成一些工作。正好老板又添置了一台服务器，派我做一下内网穿透，方便远程使用。</p><a id="more"></a>        <h1 id="服务器配置"   >          <a href="#服务器配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1>      <p>主要想记录一下软件方面的配置，所以怎么安装滑轨、怎么接线这类问题就不赘述了，下面的表格中记录了两台服务器的软硬件配置。</p><div class="table-container"><table><thead><tr><th></th><th>server1</th><th>server2</th></tr></thead><tbody><tr><td>GPU</td><td>Tesla V100 16G×2</td><td>Quadro RTX 6000 24G×2</td></tr><tr><td>CPU</td><td>Intel Xeon Gold 5117 @ 2.00GHz</td><td>Intel Xeon Gold 6240R @ 2.40GHz</td></tr><tr><td>内存</td><td>128G</td><td>128G</td></tr><tr><td>硬盘</td><td>20TB</td><td>24TB</td></tr><tr><td>操作系统</td><td>Ubuntu 18.04 LTS</td><td>Ubuntu 18.04 LTS</td></tr></tbody></table></div>        <h1 id="内网穿透"   >          <a href="#内网穿透" class="heading-link"><i class="fas fa-link"></i></a><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1>      <p>上述两台服务器都在学院机房里，此局域网的限制很大，甚至学校提供的 VPN 都无法访问，必须要在学院内部的网络才能访问。当用户在宿舍或者校外，是没有官方提供的代理工具来连接服务器的，所以就需要一台公网服务器做转发，用户通过公网 ip 来访问内网的服务器，这就需要内网穿透技术。</p><p>市面上有一些成熟的内网穿透软件，如花生壳、蒲公英等，但免费版本大多有带宽限制，且速度极慢，无法正常使用。然而这些软件底层或多或少都依赖 <span class="exturl"><a class="exturl__link"   href="https://github.com/fatedier/frp" >frp</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，一款专注于内网穿透的高性能反向代理应用，支持多种协议，可以安全的将内网服务通过公网 ip 节点的中转暴露到公网。</p><p>经调研后发现，frp 原生支持端口复用，也就是多个服务通过同一个服务端端口暴露。这样可以使用一台公网服务器同时代理两台内网服务，通过不同外网端口访问不同的内网服务。</p><p>frp 的安装包在 <span class="exturl"><a class="exturl__link"   href="https://github.com/fatedier/frp/releases" >GitHub </a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>上，值得注意的是，要想使 frp 正常工作，必须在不同服务器上下载相同版本的 frp 包。</p>        <h2 id="服务端设置"   >          <a href="#服务端设置" class="heading-link"><i class="fas fa-link"></i></a><a href="#服务端设置" class="headerlink" title="服务端设置"></a>服务端设置</h2>      <blockquote><p>frp 的服务端是进行中转的公网服务器，具有独立的公网 ip。</p></blockquote><p>下载解压 frp 包，我一般放置在 <code>/usr/local/frp/</code> 目录下，编辑服务端配置文件 <code>frps.ini</code> 。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8899</span><br></pre></td></tr></table></div></figure><p>其中：</p><ul><li>“bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。</li><li>“vhost_http_port”和“vhost_https_port”用于反向代理 HTTP 主机时使用，本文不涉及 HTTP 协议，因而照抄或者删除这条均可。</li></ul><p>编辑完成后即可保存，运行服务端应用。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></div></figure><p>此时的服务端仅运行在前台，如果 <code>Ctrl+C</code> 停止或者关闭 SSH 窗口后，frps 均会停止运行，因而我们使用 <span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/linux/linux-comm-nohup.html" >nohup 命令</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>将其运行在后台。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></div></figure><p>至此，服务端即设置完成，你可以关闭SSH窗口了。</p>        <h2 id="客户端配置"   >          <a href="#客户端配置" class="heading-link"><i class="fas fa-link"></i></a><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2>      <blockquote><p>frp 的客户端是真正想要访问的内网服务器。</p></blockquote><p>同样下载解压好 frp 软件，注意版本的统一，编辑两台客户端配置文件 <code>frpc.ini</code>。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 39.106.21.214</span><br><span class="line">server_port = 7000</span><br><span class="line"> </span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 172.10.1.185</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6666</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 39.106.21.214</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[ssh1]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 172.10.1.184</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6667</span><br></pre></td></tr></table></div></figure><p>其中：</p><ul><li>“server_addr”为服务端 ip 地址，填入即可。</li><li>“server_port”为服务器端口，填入你设置的端口号即可，如果未改变就是7000。</li><li>“[xxx]”表示一个规则名称，自己定义，便于查询即可。</li><li>“type”表示转发的协议类型，有 TCP 和 UDP 等选项可以选择，如有需要请自行查询 frp 手册。</li><li>“local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。</li><li>“remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。</li></ul><p>配置好后可以使用同样的方法后台运行客户端程序。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frpc -c frpc.ini &amp;</span><br></pre></td></tr></table></div></figure>        <h1 id="服务链架构"   >          <a href="#服务链架构" class="heading-link"><i class="fas fa-link"></i></a><a href="#服务链架构" class="headerlink" title="服务链架构"></a>服务链架构</h1>      <p>下面是整个 frp 服务链的架构（图中 ip 及端口号皆为模拟值）：</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/expose-local-server/image.png"  alt="frp 架构">      </p><p>实线代表直接网络连接，虚线代表虚拟网络连接。在内网服务器（frpc）中配置的 <code>remote_port</code> 将在启动后向公网服务器（frps）发送（通过7000端口）注册信息，发送成功后，公网服务器开始监听6666和6667两个端口。</p><p>在实际访问时，直接在 SSH 客户端输入公网服务器的 ip 地址，通过6666和6667两个端口号控制访问两台内网服务器，而其中的 <code>server_port</code> 、 <code>server_addr</code> 、 <code>local_ip</code> 和 <code>local_port</code> 等信息对用户透明，简单方便。</p><blockquote><p>参考：</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://sspai.com/post/52523" >使用frp进行内网穿透</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/fatedier/frp/issues/174" >frp issues 174</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本科 AI 实验室的服务器在内网部署，疫情期间大家都没办法在学校，又需要使用 GPU 完成一些工作。正好老板又添置了一台服务器，派我做一下内网穿透，方便远程使用。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个人的字幕组</title>
    <link href="https://seriouszyx.github.io/2021/02/04/subtitle-group-for-one-person/"/>
    <id>https://seriouszyx.github.io/2021/02/04/subtitle-group-for-one-person/</id>
    <published>2021-02-04T14:36:11.000Z</published>
    <updated>2021-06-01T06:53:26.910Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="也想成为字幕组"   >          <a href="#也想成为字幕组" class="heading-link"><i class="fas fa-link"></i></a><a href="#也想成为字幕组" class="headerlink" title="也想成为字幕组"></a>也想成为字幕组</h1>      <p>我不是很懂当代流量的导向，人们到底乐意为怎样的内容驻足，是我很困惑的问题，就像我的 CSDN 最高互动量是一篇很简单的 VMware 安装教程，我的 GitHub 最高 star 数是只进行了几周的 CS61B 课程实验。它们算不上我心目中内容产出最高的两位，却被大众普遍接受，唯一的共同点可能是门槛较低、需求较广。然而，对于这些可能是互联网上占比最大的群体，现有的资源鱼龙混杂，多少内容靠着标题吸引流量，看完后才发现是贩卖焦虑、治标不治本。所以，我想为这种情况的改变做出点贡献。</p><p>我搜索着 CS61B 的国内生态，这门完全公开、享誉世界的数据结构神课，虽在知乎、一亩三分地等处推荐强烈，但实际高质量完成的人数稀少。这要归因于语言和网络的阻碍，机翻字幕味同嚼蜡，YouTube 的访问也劝退了一大批初学者。于是我便有了方向，我决意用自己闲暇的时光，化身一个人的字幕组，翻译出这门课的所有视频资料，并搬运到 B 站。</p><p>这两天，我调研了相关的工具，考虑了一些取舍，这期间实为不易，总结出一套满意的工作流，记录于此。</p>        <h1 id="工作流"   >          <a href="#工作流" class="heading-link"><i class="fas fa-link"></i></a><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h1>              <h2 id="片源"   >          <a href="#片源" class="heading-link"><i class="fas fa-link"></i></a><a href="#片源" class="headerlink" title="片源"></a>片源</h2>      <p>视频源在 Josh Hug 的<span class="exturl"><a class="exturl__link"   href="https://www.youtube.com/channel/UC7FzTMO4rKvlqIyU5vwzFKQ/playlists" >播放列表</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中，他把每周的视频整理成一个列表，下载最高画质我比较喜欢用 <span class="exturl"><a class="exturl__link"   href="https://www.y2mate.com/" >y2mate</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，甚至可以提取出音频文件。字幕提取 <span class="exturl"><a class="exturl__link"   href="https://downsub.com/" >downsub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 挺不错的，直接下载 srt 格式，CS61B 2018 Spring 这个版本的视频有自带的 CC 字幕，但是时间轴还是有点奇怪，需要自己调整一下。如果有字幕文件格式转换的需求，我一般使用 <span class="exturl"><a class="exturl__link"   href="https://gotranscript.com/subtitle-converter" >subtitle-converter</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>        <h2 id="打轴"   >          <a href="#打轴" class="heading-link"><i class="fas fa-link"></i></a><a href="#打轴" class="headerlink" title="打轴"></a>打轴</h2>      <p>这一步就开始麻烦起来了，简单解释起来就是把每一句轴对准。此外还要考虑断句，要简单读一下每句的意思，以便后期翻译。最后，下载的英文字幕可能有出错的地方，发现也要纠正一下。</p><p>具体的操作我参考的<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1ps411b7as" >【Aegisub教程】快速打轴法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。将字幕和对应的视频文件导入 <span class="exturl"><a class="exturl__link"   href="https://github.com/Aegisub/Aegisub" >Aegisub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，只显示音频和字幕。左手放置在 SDFG 四个键位上，控制每句话的播放、确认等操作，我还把时间轴合并设置了热键，因为原版断句很多太细碎了。右手操纵鼠标左右键，控制每段时间轴的开始和结束位置，特别注意 Josh Hug 经常有一些语气词，我一般不把它们包含在轴内。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/1.png"  alt="image.png">      </p>        <h2 id="初翻"   >          <a href="#初翻" class="heading-link"><i class="fas fa-link"></i></a><a href="#初翻" class="headerlink" title="初翻"></a>初翻</h2>      <p>我习惯用 <span class="exturl"><a class="exturl__link"   href="https://zh.tern.1c7.me/" >Tern</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 先初次翻译一下，导入单语字幕后会自动机翻并生成双语字幕。因为英文的时间轴已经调整过了，断句肯定要比原版更好，即便是机翻也不会像 YouTube CC 机翻那么生硬。在软件设置里修改一下输出格式，原文译文分成两行，原文全部在前，译文全部在后。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/2.png"  alt="image.png">      </p><p>srt 是标准的外轨字幕，没有样式和动画，我倾向设置样式，加重中文的显示效果。Aegisub 有样式管理器，我的样式基于 Crash Course 字幕组的<span class="exturl"><a class="exturl__link"   href="https://1c7.me/open-source-subtitle-file/" >公开样式</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，他们组织的代表作是<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/av21376839/" >计算机速成课</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，也超过了百万播放量。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/3.png"  alt="image.png">      </p><p>分别全选所有中英文字幕，设置中英文样式模板，再把字幕以开始时间排序。保存后字幕文件会自动转换为 ass 格式，之后打开会直接链接视频文件并加载字母样式。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/4.png"  alt="image.png">      </p><p>虽然这步的名字我起为“初翻”，但主要目的是生成中文时间轴，并调整样式，为下面的翻译做准备。事实上，简单的句子机翻表现得还不错，但几乎90%的句子都需要重新修改，所以在内容翻译上，这步只是一个辅助作用。</p>        <h2 id="翻译"   >          <a href="#翻译" class="heading-link"><i class="fas fa-link"></i></a><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2>      <p>终于到了重头戏，这步难点不在工具的使用，而在于翻译。既要考虑遵于原意，又要让语言易懂，不那么生硬。特别是 Josh Hug 口语化严重，很多细节需要格外考量。另外断句也很繁琐，很多时候把一大段文字翻译完，发现会错意，又要重新逐句更改。<br>还有一些细碎的注意事项，全部加起来让工作量成倍增加，也出乎了我的设想。同时背后的专业能力也要跟上，遇到不懂的地方还要去网上查询资料。但不管怎样，还是以质量为主。</p><p>下面是翻译后的译文，可以将这几段轴与上一张图片机翻的作比较，哪一个过分生硬，哪一个一眼就能明白，显而易见。这还是开篇简单的几句话，涉及到专业的内容，机翻与手翻的差异会更加明显。<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/5.png"  alt="image.png">      </p>        <h2 id="审片"   >          <a href="#审片" class="heading-link"><i class="fas fa-link"></i></a><a href="#审片" class="headerlink" title="审片"></a>审片</h2>      <p>每一小集视频制作完成后，我都需要再整体带 ass 字幕看几遍视频，检查有没有字幕错误、不同步，时间轴是否有重合，错别字，翻译语句是否不通畅等等小问题。我其实不急于压制，也不急于发布，在制作完几个视频后，再回过头来审阅每个视频，保证错误率降到最低。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/6.png"  alt="image.png">      </p>        <h2 id="压制"   >          <a href="#压制" class="heading-link"><i class="fas fa-link"></i></a><a href="#压制" class="headerlink" title="压制"></a>压制</h2>      <p>压制即将原视频和制作好的字幕整合在一起，并设置码率等配置在保持一定清晰度的前提下大幅度压缩体积。小丸工具箱是很主流的选择，官网的网盘链接失效了，不过 B 站<span class="exturl"><a class="exturl__link"   href="https://dl.hdslb.com/video-press/xiaowantoolsrev194.zip" >创作中心</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>有提供。</p><p>为了保证视频的质量，x264和 CRF 等压缩选项都输出最高画质，之后便可以压缩成 MP4 格式，上传到 B 站。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/7.png"  alt="image.png">      </p>        <h1 id="关于课程"   >          <a href="#关于课程" class="heading-link"><i class="fas fa-link"></i></a><a href="#关于课程" class="headerlink" title="关于课程"></a>关于课程</h1>      <p>大概是周一萌生了这个想法，周二周三调研相关工具后亲手制作了将近20分钟时长的视频，周四写下了这篇记录，所以还有很多不成熟的地方，我会随时修改。</p><p>这件事情本源于我的心血来潮，真正去实践起来，花费的时间要比我预想的多得多。我还没有确定发布的进度，可能凑几周发布一次，也可能全制作好后一起发布，也可能永远搁置了。</p><p>但值得庆幸的是，虽然包含很多重复的工作，我投入起来却干劲十足，甚至有点茶饭不思的激情。审片是整个流程中最开心的时刻，看着原版难以理解的视频，一步一步经过我手变得通俗易懂，我想这种成就感会推动我一直走下去，直至课程尽头。</p>]]></content>
    
    <summary type="html">
    
      我搜索着 CS61B 的国内生态，这门完全公开、享誉世界的数据结构神课，虽在知乎、一亩三分地等处推荐强烈，但实际高质量完成的人数稀少。这要归因于语言和网络的阻碍，机翻字幕味同嚼蜡，YouTube 的访问也劝退了一大批初学者。于是我便有了方向，我决意用自己闲暇的时光，化身一个人的字幕组，翻译出这门课的所有视频资料，并搬运到 B 站。&lt;br&gt;&lt;br&gt;这两天，我调研了相关的工具，考虑了一些取舍，这期间实为不易，总结出一套满意的工作流，记录于此。
    
    </summary>
    
    
  </entry>
  
</feed>
