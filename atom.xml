<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>隐秀</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://seriouszyx.com/"/>
  <updated>2021-05-12T02:56:38.314Z</updated>
  <id>https://seriouszyx.com/</id>
  
  <author>
    <name>Yixiang Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务器内网穿透</title>
    <link href="https://seriouszyx.com/2021/02/14/expose-local-server/"/>
    <id>https://seriouszyx.com/2021/02/14/expose-local-server/</id>
    <published>2021-02-14T13:40:49.000Z</published>
    <updated>2021-05-12T02:56:38.314Z</updated>
    
    <content type="html"><![CDATA[<p>本科 AI 实验室的服务器在内网部署，疫情期间大家都没办法在学校，又需要使用 GPU 完成一些工作。正好老板又添置了一台服务器，派我做一下内网穿透，方便远程使用。</p><a id="more"></a>        <h1 id="服务器配置"   >          <a href="#服务器配置" class="heading-link"><i class="fas fa-link"></i></a>服务器配置</h1>      <p>主要想记录一下软件方面的配置，所以怎么安装滑轨、怎么接线这类问题就不赘述了，下面的表格中记录了两台服务器的软硬件配置。</p><div class="table-container"><table><thead><tr><th></th><th>server1</th><th>server2</th></tr></thead><tbody><tr><td>GPU</td><td>Tesla V100 16G×2</td><td>Quadro RTX 6000 24G×2</td></tr><tr><td>CPU</td><td>Intel Xeon Gold 5117 @ 2.00GHz</td><td>Intel Xeon Gold 6240R @ 2.40GHz</td></tr><tr><td>内存</td><td>128G</td><td>128G</td></tr><tr><td>硬盘</td><td>20TB</td><td>24TB</td></tr><tr><td>操作系统</td><td>Ubuntu 18.04 LTS</td><td>Ubuntu 18.04 LTS</td></tr></tbody></table></div>        <h1 id="内网穿透"   >          <a href="#内网穿透" class="heading-link"><i class="fas fa-link"></i></a>内网穿透</h1>      <p>上述两台服务器都在学院机房里，此局域网的限制很大，甚至学校提供的 VPN 都无法访问，必须要在学院内部的网络才能访问。当用户在宿舍或者校外，是没有官方提供的代理工具来连接服务器的，所以就需要一台公网服务器做转发，用户通过公网 ip 来访问内网的服务器，这就需要内网穿透技术。</p><p>市面上有一些成熟的内网穿透软件，如花生壳、蒲公英等，但免费版本大多有带宽限制，且速度极慢，无法正常使用。然而这些软件底层或多或少都依赖 <span class="exturl"><a class="exturl__link"   href="https://github.com/fatedier/frp" >frp</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，一款专注于内网穿透的高性能反向代理应用，支持多种协议，可以安全的将内网服务通过公网 ip 节点的中转暴露到公网。</p><p>经调研后发现，frp 原生支持端口复用，也就是多个服务通过同一个服务端端口暴露。这样可以使用一台公网服务器同时代理两台内网服务，通过不同外网端口访问不同的内网服务。</p><p>frp 的安装包在 <span class="exturl"><a class="exturl__link"   href="https://github.com/fatedier/frp/releases" >GitHub </a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>上，值得注意的是，要想使 frp 正常工作，必须在不同服务器上下载相同版本的 frp 包。</p>        <h2 id="服务端设置"   >          <a href="#服务端设置" class="heading-link"><i class="fas fa-link"></i></a>服务端设置</h2>      <blockquote><p>frp 的服务端是进行中转的公网服务器，具有独立的公网 ip。</p></blockquote><p>下载解压 frp 包，我一般放置在 <code>/usr/local/frp/</code> 目录下，编辑服务端配置文件 <code>frps.ini</code> 。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8899</span><br></pre></td></tr></table></div></figure><p>其中：</p><ul><li>“bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。</li><li>“vhost_http_port”和“vhost_https_port”用于反向代理 HTTP 主机时使用，本文不涉及 HTTP 协议，因而照抄或者删除这条均可。</li></ul><p>编辑完成后即可保存，运行服务端应用。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></table></div></figure><p>此时的服务端仅运行在前台，如果 <code>Ctrl+C</code> 停止或者关闭 SSH 窗口后，frps 均会停止运行，因而我们使用 <span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/linux/linux-comm-nohup.html" >nohup 命令</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>将其运行在后台。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></div></figure><p>至此，服务端即设置完成，你可以关闭SSH窗口了。</p>        <h2 id="客户端配置"   >          <a href="#客户端配置" class="heading-link"><i class="fas fa-link"></i></a>客户端配置</h2>      <blockquote><p>frp 的客户端是真正想要访问的内网服务器。</p></blockquote><p>同样下载解压好 frp 软件，注意版本的统一，编辑两台客户端配置文件 <code>frpc.ini</code>。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 39.106.21.214</span><br><span class="line">server_port = 7000</span><br><span class="line"> </span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 172.10.1.185</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6666</span><br></pre></td></tr></table></div></figure><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 39.106.21.214</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[ssh1]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 172.10.1.184</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6667</span><br></pre></td></tr></table></div></figure><p>其中：</p><ul><li>“server_addr”为服务端 ip 地址，填入即可。</li><li>“server_port”为服务器端口，填入你设置的端口号即可，如果未改变就是7000。</li><li>“[xxx]”表示一个规则名称，自己定义，便于查询即可。</li><li>“type”表示转发的协议类型，有 TCP 和 UDP 等选项可以选择，如有需要请自行查询 frp 手册。</li><li>“local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。</li><li>“remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。</li></ul><p>配置好后可以使用同样的方法后台运行客户端程序。</p><figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frpc -c frpc.ini &amp;</span><br></pre></td></tr></table></div></figure>        <h1 id="服务链架构"   >          <a href="#服务链架构" class="heading-link"><i class="fas fa-link"></i></a>服务链架构</h1>      <p>下面是整个 frp 服务链的架构（图中 ip 及端口号皆为模拟值）：</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/expose-local-server/image.png"  alt="frp 架构">      </p><p>实线代表直接网络连接，虚线代表虚拟网络连接。在内网服务器（frpc）中配置的 <code>remote_port</code> 将在启动后向公网服务器（frps）发送（通过7000端口）注册信息，发送成功后，公网服务器开始监听6666和6667两个端口。</p><p>在实际访问时，直接在 SSH 客户端输入公网服务器的 ip 地址，通过6666和6667两个端口号控制访问两台内网服务器，而其中的 <code>server_port</code> 、 <code>server_addr</code> 、 <code>local_ip</code> 和 <code>local_port</code> 等信息对用户透明，简单方便。</p><blockquote><p>参考：</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://sspai.com/post/52523" >使用frp进行内网穿透</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://github.com/fatedier/frp/issues/174" >frp issues 174</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本科 AI 实验室的服务器在内网部署，疫情期间大家都没办法在学校，又需要使用 GPU 完成一些工作。正好老板又添置了一台服务器，派我做一下内网穿透，方便远程使用。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个人的字幕组</title>
    <link href="https://seriouszyx.com/2021/02/04/subtitle-group-for-one-person/"/>
    <id>https://seriouszyx.com/2021/02/04/subtitle-group-for-one-person/</id>
    <published>2021-02-04T14:36:11.000Z</published>
    <updated>2021-05-12T02:56:38.314Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="也想成为字幕组"   >          <a href="#也想成为字幕组" class="heading-link"><i class="fas fa-link"></i></a>也想成为字幕组</h1>      <p>我不是很懂当代流量的导向，人们到底乐意为怎样的内容驻足，是我很困惑的问题，就像我的 CSDN 最高互动量是一篇很简单的 VMware 安装教程，我的 GitHub 最高 star 数是只进行了几周的 CS61B 课程实验。它们算不上我心目中内容产出最高的两位，却被大众普遍接受，唯一的共同点可能是门槛较低、需求较广。然而，对于这些可能是互联网上占比最大的群体，现有的资源鱼龙混杂，多少内容靠着标题吸引流量，看完后才发现是贩卖焦虑、治标不治本。所以，我想为这种情况的改变做出点贡献。</p><p>我搜索着 CS61B 的国内生态，这门完全公开、享誉世界的数据结构神课，虽在知乎、一亩三分地等处推荐强烈，但实际高质量完成的人数稀少。这要归因于语言和网络的阻碍，机翻字幕味同嚼蜡，YouTube 的访问也劝退了一大批初学者。于是我便有了方向，我决意用自己闲暇的时光，化身一个人的字幕组，翻译出这门课的所有视频资料，并搬运到 B 站。</p><p>这两天，我调研了相关的工具，考虑了一些取舍，这期间实为不易，总结出一套满意的工作流，记录于此。</p>        <h1 id="工作流"   >          <a href="#工作流" class="heading-link"><i class="fas fa-link"></i></a>工作流</h1>              <h2 id="片源"   >          <a href="#片源" class="heading-link"><i class="fas fa-link"></i></a>片源</h2>      <p>视频源在 Josh Hug 的<span class="exturl"><a class="exturl__link"   href="https://www.youtube.com/channel/UC7FzTMO4rKvlqIyU5vwzFKQ/playlists" >播放列表</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中，他把每周的视频整理成一个列表，下载最高画质我比较喜欢用 <span class="exturl"><a class="exturl__link"   href="https://www.y2mate.com/" >y2mate</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，甚至可以提取出音频文件。字幕提取 <span class="exturl"><a class="exturl__link"   href="https://downsub.com/" >downsub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 挺不错的，直接下载 srt 格式，CS61B 2018 Spring 这个版本的视频有自带的 CC 字幕，但是时间轴还是有点奇怪，需要自己调整一下。如果有字幕文件格式转换的需求，我一般使用 <span class="exturl"><a class="exturl__link"   href="https://gotranscript.com/subtitle-converter" >subtitle-converter</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。</p>        <h2 id="打轴"   >          <a href="#打轴" class="heading-link"><i class="fas fa-link"></i></a>打轴</h2>      <p>这一步就开始麻烦起来了，简单解释起来就是把每一句轴对准。此外还要考虑断句，要简单读一下每句的意思，以便后期翻译。最后，下载的英文字幕可能有出错的地方，发现也要纠正一下。</p><p>具体的操作我参考的<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/BV1ps411b7as" >【Aegisub教程】快速打轴法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。将字幕和对应的视频文件导入 <span class="exturl"><a class="exturl__link"   href="https://github.com/Aegisub/Aegisub" >Aegisub</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，只显示音频和字幕。左手放置在 SDFG 四个键位上，控制每句话的播放、确认等操作，我还把时间轴合并设置了热键，因为原版断句很多太细碎了。右手操纵鼠标左右键，控制每段时间轴的开始和结束位置，特别注意 Josh Hug 经常有一些语气词，我一般不把它们包含在轴内。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/1.png"  alt="image.png">      </p>        <h2 id="初翻"   >          <a href="#初翻" class="heading-link"><i class="fas fa-link"></i></a>初翻</h2>      <p>我习惯用 <span class="exturl"><a class="exturl__link"   href="https://zh.tern.1c7.me/" >Tern</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 先初次翻译一下，导入单语字幕后会自动机翻并生成双语字幕。因为英文的时间轴已经调整过了，断句肯定要比原版更好，即便是机翻也不会像 YouTube CC 机翻那么生硬。在软件设置里修改一下输出格式，原文译文分成两行，原文全部在前，译文全部在后。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/2.png"  alt="image.png">      </p><p>srt 是标准的外轨字幕，没有样式和动画，我倾向设置样式，加重中文的显示效果。Aegisub 有样式管理器，我的样式基于 Crash Course 字幕组的<span class="exturl"><a class="exturl__link"   href="https://1c7.me/open-source-subtitle-file/" >公开样式</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，他们组织的代表作是<span class="exturl"><a class="exturl__link"   href="https://www.bilibili.com/video/av21376839/" >计算机速成课</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>，也超过了百万播放量。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/3.png"  alt="image.png">      </p><p>分别全选所有中英文字幕，设置中英文样式模板，再把字幕以开始时间排序。保存后字幕文件会自动转换为 ass 格式，之后打开会直接链接视频文件并加载字母样式。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/4.png"  alt="image.png">      </p><p>虽然这步的名字我起为“初翻”，但主要目的是生成中文时间轴，并调整样式，为下面的翻译做准备。事实上，简单的句子机翻表现得还不错，但几乎90%的句子都需要重新修改，所以在内容翻译上，这步只是一个辅助作用。</p>        <h2 id="翻译"   >          <a href="#翻译" class="heading-link"><i class="fas fa-link"></i></a>翻译</h2>      <p>终于到了重头戏，这步难点不在工具的使用，而在于翻译。既要考虑遵于原意，又要让语言易懂，不那么生硬。特别是 Josh Hug 口语化严重，很多细节需要格外考量。另外断句也很繁琐，很多时候把一大段文字翻译完，发现会错意，又要重新逐句更改。<br>还有一些细碎的注意事项，全部加起来让工作量成倍增加，也出乎了我的设想。同时背后的专业能力也要跟上，遇到不懂的地方还要去网上查询资料。但不管怎样，还是以质量为主。</p><p>下面是翻译后的译文，可以将这几段轴与上一张图片机翻的作比较，哪一个过分生硬，哪一个一眼就能明白，显而易见。这还是开篇简单的几句话，涉及到专业的内容，机翻与手翻的差异会更加明显。<br>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/5.png"  alt="image.png">      </p>        <h2 id="审片"   >          <a href="#审片" class="heading-link"><i class="fas fa-link"></i></a>审片</h2>      <p>每一小集视频制作完成后，我都需要再整体带 ass 字幕看几遍视频，检查有没有字幕错误、不同步，时间轴是否有重合，错别字，翻译语句是否不通畅等等小问题。我其实不急于压制，也不急于发布，在制作完几个视频后，再回过头来审阅每个视频，保证错误率降到最低。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/6.png"  alt="image.png">      </p>        <h2 id="压制"   >          <a href="#压制" class="heading-link"><i class="fas fa-link"></i></a>压制</h2>      <p>压制即将原视频和制作好的字幕整合在一起，并设置码率等配置在保持一定清晰度的前提下大幅度压缩体积。小丸工具箱是很主流的选择，官网的网盘链接失效了，不过 B 站<span class="exturl"><a class="exturl__link"   href="https://dl.hdslb.com/video-press/xiaowantoolsrev194.zip" >创作中心</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>有提供。</p><p>为了保证视频的质量，x264和 CRF 等压缩选项都输出最高画质，之后便可以压缩成 MP4 格式，上传到 B 站。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/assets/posts/subtitle-group-for-one-person/7.png"  alt="image.png">      </p>        <h1 id="关于课程"   >          <a href="#关于课程" class="heading-link"><i class="fas fa-link"></i></a>关于课程</h1>      <p>大概是周一萌生了这个想法，周二周三调研相关工具后亲手制作了将近20分钟时长的视频，周四写下了这篇记录，所以还有很多不成熟的地方，我会随时修改。</p><p>这件事情本源于我的心血来潮，真正去实践起来，花费的时间要比我预想的多得多。我还没有确定发布的进度，可能凑几周发布一次，也可能全制作好后一起发布，也可能永远搁置了。</p><p>但值得庆幸的是，虽然包含很多重复的工作，我投入起来却干劲十足，甚至有点茶饭不思的激情。审片是整个流程中最开心的时刻，看着原版难以理解的视频，一步一步经过我手变得通俗易懂，我想这种成就感会推动我一直走下去，直至课程尽头。</p>]]></content>
    
    <summary type="html">
    
      我搜索着 CS61B 的国内生态，这门完全公开、享誉世界的数据结构神课，虽在知乎、一亩三分地等处推荐强烈，但实际高质量完成的人数稀少。这要归因于语言和网络的阻碍，机翻字幕味同嚼蜡，YouTube 的访问也劝退了一大批初学者。于是我便有了方向，我决意用自己闲暇的时光，化身一个人的字幕组，翻译出这门课的所有视频资料，并搬运到 B 站。&lt;br&gt;&lt;br&gt;这两天，我调研了相关的工具，考虑了一些取舍，这期间实为不易，总结出一套满意的工作流，记录于此。
    
    </summary>
    
    
  </entry>
  
</feed>
